from sage.all import *
from Crypto.Cipher import AES
import hashlib
import base64
import binascii

Sciper=196683
'''
########################
###### Exercise 1 ######
########################
f0="A0UpYXMgLxQsdkN2Dk5YAw=="
f1="CSw7RDQ1RlYWPTlcChdyHA=="
f4="AzhOcjJGHwEvTlY6TmI3Sw=="
f5="GGREEht7WCd7aidbexQPJQ=="
hf11="htvc8tmChELD4oAuga19zkPikGs="
hf13="jc95e050+bRfTnMLqU2smlEGE8U="
c0="dCBlqsp+Y4muB5QWq6SwXA=="
c1="0UpbKqs48mTdeu1y1Ohg1Q=="
c4="v0FfusDsiKbBvquXDD8dCA=="
c5="TfLKSxseyofBO5w0ENrz9w=="
hm11="tUHLiokrLmsZPcB8WHtbNeRludU="
hm13="xI6/37FmRboYLKy4UKyAKhwc3VY="
hm30="Qx27HX2LUeE/cIFU5RZPxsYFxWc="
k1="WmUaPGsgAHR7flQwFGRpFA=="
k2="TndkXEtDdBU8XHQuEDAnBQ=="
k3="EgthZVkEAglwVh8eK388AQ=="
k4="S0QRHyEiGispfRhmH0gNFQ=="

print "################# Exercise 1 ################"

print "First part:"

bin = BinaryStrings()
def encrypteString(string):
    enc = "";
    for s in string:
        enc = enc + str(bin.encoding(s));
    return enc;
F0 = base64.b64decode(f0)
F1 = base64.b64decode(f1)
F4 = base64.b64decode(f4)
F5 = base64.b64decode(f5)
HF11 = base64.b64decode(hf11)
HF13 = base64.b64decode(hf13)

print base64.b64encode(
	# = HF30
	hashlib.sha1(
		# = HF20 + HF21
		hashlib.sha1(
			# = HF10
			hashlib.sha1(F0+F1).digest()
			+ HF11
		).digest()
		+
		hashlib.sha1(
			# = HF12
			hashlib.sha1(F4+F5).digest()
			+ HF13
		).digest()
	).digest()
)
print "Second part:"

def partTwo(k):
	print "==== K:" + k
	aes = AES.new(base64.b64decode(k),AES.MODE_ECB)

	d0 = (aes.decrypt(base64.b64decode(c0)))
	d1 = (aes.decrypt(base64.b64decode(c1)))
	d4 = (aes.decrypt(base64.b64decode(c4)))
	d5 = (aes.decrypt(base64.b64decode(c5)))

	d10 = hashlib.sha1(d0+d1).digest()
	d11 = base64.b64decode(hm11)
	d12 = hashlib.sha1(d4+d5).digest()
	d13 = base64.b64decode(hm13)
	
	d20 = hashlib.sha1(d10+d11).digest()
	d21 = hashlib.sha1(d12+d13).digest()
	
	d30 = hashlib.sha1(d20+d21).digest()

	print "HM30 = " + hm30 + " ; D30 = " + base64.b64encode(d30)
	
partTwo(k1)
partTwo(k2)
partTwo(k3)
partTwo(k4)
'''
'''
########################
###### Exercise 2 ######
########################
m2= "Bagger ! The word is barajillo"
N2= 15559087802105620035659119397525236537343036364509453460733937702776427760141955972822592045743061614002741016373679287302677123701018300892371072035470814036001652617507634274192877416898814936000998481625247428165759505628436957278238128662159494095846783763073077606942525526731973864649980125346724586752484606901790185464860998287281064580104243825508694424083608053834283280631922131727512624303511963926084950440856247492743015826505619577042717726158531019061024037330219807752154231588399919945525808616203916088601800281000682645076329274949307615391127730534034861309228147353296334334582957461367349433717
e2= 196683

print "################# Exercise 2 ################"


# Transform a string to its ascii representation.
def stringToAscii(str):
	intStr = "1"
	for i in range(len(str)):
		intStr += charToAscii(str[i])
	return int(intStr)

# Transform an Ascii representation to the string it represents.	
def asciiToString(int):
	intStr=str(int)
	if intStr[0] != "1":
		return "Not a proper ASCII string"
	s = "";
	for i in range((len(intStr)-1)/3):
		s += asciiToChar(intStr[3*i+1]+intStr[3*i+2]+intStr[3*i+3])
	return s

# Transform a character to it Ascii representation.
def charToAscii(c):
	id = ord(c)
	if id < 10:
		return "00"+str(id)
	elif id < 100:
		return "0"+str(id)
	else:
		return str(id)

# Transform an Ascii representation of a char into that char.		
def asciiToChar(a):
	if int(a) >255:
		return "?"
	if a[0]=="0" and a[1]=="0":
		return chr(int(a[2]))
	elif a[0]=="0":
		return chr(int(a[1]+a[2]))
	else :	
		return chr(int(a))

M2 = stringToAscii(m2)

n2 = Integers(N2)
M2b = M2%N2
print factor(M2b)

f1 = n2(29)
f2 = n2(1320777284053)
f3 = n2(139313269720279)
f4 = n2(105006842399563554202792592537)
f5 = n2(1902650807738485660166369105094161)

# Query result for the factors of M2b
q1 = n2(10019507214215661107998616295253176840669127990208368727503174929596923211071857698860706824996393202002017185865269060122581246246661442782624429999175173015286296123190670206772993263701569961740062098601202801571379238188763319592262422597681653648151974869409360752428028707640422061544871133624776143655394815701060479215326521138709511469948379888818065409057206377411049995515110192674538733029913772414483740631961570025992606584906710730618925412234569835352351115759838223410452498696921584457935752235908721178326390250619605007707448288364272459988790267739459283862125003520502710184221392609452445435272)
q2 = n2(5935387580665513698979779064357687083971488201304082082827122841282650075327733401849734006801762998047049882233787313319319827361641989497940966307913084482185717459762629761253219232750557241162948997764212744386168771731884804833620191782407151904486488576078295915666402939394037189078410955634590334952188825925633190025627793184474656223972089302479574009926087437984085969688302783375576671372828486401605910328218611779863294911701393491760227412044615742063258329649246971031090735450873209013904587946499562687021309858280897314459503933780222410044090897751299556111763519401560584094381662286613853420528)
q3 = n2(10837757713071359003688611051165509492136493163495317439740997515645901777470261736711879990133402962336019838101275964402079431187077338646483735897029799506700598223908106853686333474699078014285689523818340471802106353295238270749688477001937294558054805514609985771231188104931033110349314465599391337405455175929287000684833462711169070736314473023081303021225228435565959854138987952946455786051138162612044003350260260682213157975889808112145876407971747954433857702951248550919776159293430809267757144137416525156408225781359402141191338531772988180270169448510585614653892094501166651388372613675993176899269)
q4 = n2(7673855605883969049042336260128944750724137697755346673978820298923609144767367388744828216145007098364086126432899225574910841343675018882392910465092459987562537838441555507360433497355401281565084470816299361879497971422609929139410095853892200530314050059264896957767773284231729656396186748076186663131218168933291177251732938125565962622353602235313387138976467244638579215886166247849785991167617802622999277604761807004771854388928838537760755837061795032583069105745698334736588629592111050219652683525095879229803695721114711686865421792841538192124349380556673227948870006384258394161490144451046232318030)
q5 = n2(15499875365163654973645531789356817386268609581109463277244974499819157126423424871400250909586134617867574428932147030977436960243934457786394339747131837198731518081099030034297190036873332103104156610594145764184956663180021682472374979161066453988118633753943085393388438299691203936731359165437037005150939388374081820098369362456584382321604870379882003982523330064443086258650035061993295225083784254047166971829155784873638583833957924915155446151868037884495686633358730151534909721604836016164817636757819365519696860253368531030273044613770016960062583730853823925929041044244971217185740226502757321904853)

# Query results for f1*f2, f1*f2*f3, f1*f2*f3*f4 and f4*f5
# print "f1*f2: " + str(f1*f2)
# print "f1*f2*f3: " + str(f1*f2*f3)
# print "f1*f2*f3*f4: " + str(f1*f2*f3*f4)
# print "f4*f5: " + str(f4*f5)
# test1 = n2(9546274210063477641250151977382421695028486210278507102549266535617916998022745825805416528924929481649270029748444385361292849917438302506453222920986606940569570873788730738473272193872009151893964268403261715949432465079306401800785641306829383991406442203865082787336429792206502553353716417083230055765247902917503573544015302507172624092297431775957732411508623985601051988162998378947471996482284086180783590870475048368109780717510678922938644241313704059699815184042501847291008911649601159992965360880945515118171066585625779265331185674028529272662484971128209060232205604153333554608119097795434036018440)
# test2 = n2(8713980179463127969283248797891086908553603798384530359956825483735911108934390416409193556500494403250307257711199811110428113609050964738729380214296967326636584323075569970669611495386034212973584026485924776751173771996279784614617693952073502072069003150770447562303080307739271221098637537782350810544526162410699027008206887429384667428888672307741182937330168343099227608426376849953519600380049349398642259142724299613803726442656129344599178577339858221293886551920724543693806418635423544727035701895039968951436951693410949109878816496376125992441557578591610918055969878712301250997058737367501733239924)
# test3 = n2(11853293699763526258168989379540275074224464710605299163022324017196909590208634807800812654757013786723355442806149777408121203507480647483130049161449888718142299659765401002292865822002060741084033675253824309298132545315844155038059831601134500936723663008558750807901506499962106397326239149583212103702237037657683108292508848791880136047226049259310503411186311485659818600470297235958067970680858675222134326468754551810642877485555267230552636497334088629462500729304345254680055417989094048721426104747688934660428348038592863654082534545271302020493081325013979678267741770036203887287935043676173668366524)
# test4 = n2(3220801849510884788277218107853750393636737786698495130094597975777088805711934538799644704883850055662831311448253351591324300353868025512640787582689091285485800056237724403239572328176347171551471151683298099500797793704339024255639092920555858231479416972300157524071796032340753459384369309152631941881225735022230281424980619597188709852658167272146898282189558136264094199132867768074355684602020520426373025587761416246879364558104008799977715246633199521418861464274495562841069653961944069839138367357466052399397084657393842539460009712218406808530479902062521399432047952747322088182200500124203370426876)

# Check if Query(f1*f2) = Query(f1)* Query(f2), ...
# print "f1*f2: " + str((((q1*q2)%N2) == test1 ))
# print "f1*f2*f3: " + str((((q1*q2*q3)%N2) == test2 ))
# print "f1*f2*f3*f4: " + str((((q1*q2*q3*q4)%N2) == test3 ))
# print "f4*f5: " + str((((q4*q5)%N2) == test4 ))

print "Result: "+ str((q1*q2*q3*q4*q5)%N2)

'''
'''
########################
###### Exercise 3 ######
########################
k3= "OAsJE1hZdQ5QPy0HGiRlBA=="
c3= "aEbPUEUO/5bHJKB5bVf1pwfxC3QDbRL2Pbr+jWviTrXn5Pq1lDIdbkE1MLlQbcpbMx4zoBazvH4="
T3= "oyDAkW4wE2zpG1Sx1Dc="
m3= "This message is the input to my strong sponge-Bob scheme"

print "################# Exercise 3 ################"

'''
'''
########################
###### Exercise 4 ######
########################
S415= 1205849759272591266235001091146548449829568771110927301274652094321058635754282807491242793522945912080211276271697120180776147396378674132022170438441527
S425= 2453840796063470448645202384616868704028708384427863607476071187086076763554238868066123548142039312862988186453253327337435350616641106275753790432273294
p41= 11707952857175165653955174746482017550302939289121399886623980217501257593411524441310953700564026587142044883321376674417273042857411576246720908820074189
p42= 11427371199525012857086070936986076133311530744088981764880048056845008832299333854767208728261894984744143743609329458155499951654355714389695150241592803

x = PolynomialRing(GF(p41), 'x').gen()
z = PolynomialRing(GF(p42), 'z').gen()

R41= x**7 + 8740413788396974729064379470331134867749789143469270720588860256832176036799221871143575016651296165258584947114499571709163406449949705977865764791850118*x**6 + 10695436336657645150761161863633073863085291318628471258361491441545032537886871614210246364797020472683773106051681443092637628012623675418256176217864726*x**5 + 6009160969934310636953012261232864435137111272921076470116386657390574269572175757731002103416060691827225169261369196504678152128240061245681612286748805*x**4 + 10169428735605774381408594307637016849512392311150564627098346751510571954381076589582073786651406520183792426494231540849140681708382981636930563004957847*x**3 + 6134860487278007738473890674117242306008849025906773694644723362481899645322110712729901937155811382331313848705610928459299643188197590317604744965085963*x**2 + 11062124452370863558514104665812100925879504564453897849549050285708829018451954979277632731563842518442314642507235717399619002053836077242910184984390153*x + 1998039434782645168245736262595258226504498924088929217927085817311895989129111490036046372130735616679224655377345258767444549548444726065748381775738715
R42= z**5 + 865544996930520216605799559687382734262900143544739778223871602047790634699598477463922831682180761539656397756011814670714155274466735051369591871518970*z**4 + 9896547651492625658083426217263861806240097337363885151091235433571999894183457321508550732723589278054972161530930313189394613441932170402594399406962676*z**3 + 6764012015674520348453266303748588624116542177518289667086828811604436295039447020332601918191618578967355807478185735628906188668478047179909854019095267*z**2 + 5777794053487146094881413161547926596078992511052450809316406111938287266914801399187676142316718959315499452712870228992617531774528572968266219921572172*z + 280276511547606940900082955029829400506139794958526718823691318131271266439138711715706795633364474651534509719812606205927715656572856044891358204475450

print "################# Exercise 4 ################"

P41 = Integers(p41)
P42 = Integers(p42)
tempX = P41(S415)
tempZ = P42(S425)

f41 = R41.factor()
f42 = R42.factor()
print "R41: " + str(list(f41)[0][0]-x)
print "R42: " + str(list(f42)[0][0]-z)

rootX = P41(tempX.nth_root(7))
tempX = rootX - 2921195235081734340431364888116164631150389776084381515316120067761919090030106616064932673887903250342947118633696606589490921329623040317798096230274901
rootZ = P42(tempZ.nth_root(5))
tempZ = rootZ - 173108999386104043321159911937476546852580028708947955644774320409558126939919695492784566336436152307931279551202362934142831054893347010273918374303794
print "S41: ",tempX
print "S42: ",tempZ

P = [p41, p42]
temp = [6461015267619238964139137866272178639373442683136306408809604438347071254506003521637772897582515525113184307154659903784996067258159615726807325139553436, 5777651335099234012062735045678546645744970534173677424391720774683600085708310996439591410524641469628756761514634982890353960353671174628651306986021306]

C4 = crt(temp, P)
print "C4: " + str(C4)
# Check
print "R41: " +str(R41(R41(R41(R41(R41(C4%p41))))) == P41(S415))
print "R42: " +str(R42(R42(R42(R42(R42(C4%p42))))) == P42(S425))


'''
'''
########################
###### Exercise 5 ######
########################

print "################# Exercise 5 ################"
q5=1038412495158341420029096459884876771129083612924522099676102604738744785824191980819263027
p5=13525759834272925956479245266195607435767912774734954080356679199696258370983741632795912611561718220611273865855697920567407000705616553907138025183348199356328979404957013347735422559304781921945883650049841809147928009195443259235969473401571296992120723105624967552868836215098845108658059629201351637085517417992970471364343469
c51=10929606218025716567061586042212705282680608653963131322975204869101992134150385591435081605795214100296752175513452592401983562419259861585254056182093363235157272034108829896078637166045236831775552472288652205797085083239535241556237645201132307517854849010143123829239694200413854282906561691322814524335157122170315104105036678
g5=7213443996870067127705169118458653023074066814940869453094879207861259262912629043882793651941023740414629606935307476137492626440898901579195498063225080078806153982050054884411358466767343916957502685910308151471479451774801159480225307841725071030170020304705267678450239814413536047803519103802225625238835655438991034048342465
a5=96445101914701245327183524187662970559869248904459828404848701940939894934163528052296959
h5=1458490453968324154993867632717755136905349245677068053206676965369659829294466756928654502142763858624850804453442056017537358664675572827594550775667431440998893650261428893217472344389972546900120936299120548494092657683370367966262159907924150997147067971965799495311432135211349384529934127051428271416924053752451052722589590
m52=764671084839387906941500654024498886328510045548269342582631140481295139701023465484823572
m53=68755007778440291393414549252864176996876630051015337439142412305337362564271130519604427
r52=827698363338202658085884247878029533382420623149771826933204461109392294297790154176194716
c52=12574984870981842133753266657992223827086709128693357501400391866268435077017871741651335900592494410065572554701020657531884670966570795061519114960259952843906589401958449784268060761533204191116480072090339871275578206465154937974367937992003941347634592465378615140834622322568021954347440059848368215606113942331028902824441016

P5 = Integers(p5)
G5 = P5(g5)

for i in range(10000):
    t = G5 ** i
    if t == c51:
        print "Q5a = " + str(i)
        break
        
Q5 = Mod(((m52 - m53) / a5 + r52),q5)
print "Q5b = " + str(Q5)
'''